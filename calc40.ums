// All registers are represented as follows:
//      r0: 0
//      r1: return address (on call) / return value (on return)
//      r2: call stack pointer
//      r3: value stack pointer
//      r4: machine state (0 for waiting and 1 for entering)
//      r5: volatile register
//      r6, r7: temporary registers
// Calling conventions:
//      r1, r2, r3: must persist across function calls (non-volatile)
//      r4: volatile within procedures as long as it is set to appropriate
//      state upon exiting the procedure

.section data
.zero r0
.temps r6, r7

jumptable:
    .space 256
    
.section init
r5 := jumptable
r4 := jumptable + 256

// m[r0][x] == input_err for all x s.t. r5 <= x < r4
// continue to jumptable_setup_digits
jumptable_set_inputerr:
    m[r0][r5] := input_err
    r5 := r5 + 1
    if (r5 == r4) goto jumptable_setup_digits using r3
    goto jumptable_set_inputerr 

// r5 and r4 set to bounds of digits in jumptable
jumptable_setup_digits:
    r5 := jumptable + '0'
    r4 := jumptable + '9'
// m[r0][x] == digit for all x s.t. r5 <= x <= r4
jumptable_set_digits:     
    m[r0][r5] := digit
    r5 := r5 + 1
    if (r5 <=s r4) goto jumptable_set_digits using r3

// m[r0][x] == space where x is jumptable + ' ' 
.section init
m[r0][jumptable + ' '] := space

// m[r0][x] == space where x is jumptable + '\t' 
m[r0][jumptable + '\t'] := space

// m[r0][x] == space where x is jumptable + '\v' 
m[r0][jumptable + 11] := space

// m[r0][x] == space where x is jumptable + '\f'
m[r0][jumptable + 12] := space

// m[r0][x] == space where x is jumptable + '\r'
m[r0][jumptable + 13] := space

// Puts the machine back into the waiting state
.section text
space:
    r4 := 0         // calculator enters the waiting stage
    goto calculator
    
// m[r0][x] == newline where x is jumptable + '\n'
.section init
m[r0][jumptable + '\n'] := newline

// Prints all values in the value stack and returns the machine
// to the waiting state
.section text
newline:
    push r1 on stack r2
    r4 := r3        // making a copy of the value stack pointer
    newline_loop:
        // reached bottom of stack
        if (r4 == value_stack) goto newline_end using r5
        r5 := m[r0][r4]
        push r5 on stack r2        // value to be printed
        output ">>> "
        goto print linking r1
        output "\n"
        r4 := r4 + 1                // moving up in value stack
        goto newline_loop
    newline_end:
        r4 := 0             // return to waiting state
        pop r1 off stack r2
        goto calculator

// m[r0][x] == add where x is jumptable + '+'
.section init
m[r0][jumptable + '+'] := add

// Removes the two youngest values of the stack and pushes their sum onto the
// stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
add:
    push r1 on stack r2

    r5 := 2                     // number of elements required for add fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    pop r5 off stack r3         // pop x

    r4 := r5 + r4               // calculate x + y
    push r4 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == subtract where x is jumptable + '-'
.section init
m[r0][jumptable + '-'] := subtract

// Removes the two youngest values of the stack and pushes their difference 
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
subtract:
    push r1 on stack r2

    r5 := 2                     // number of elements required for subtract fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    pop r5 off stack r3         // pop x

    r4 := r5 - r4               // calculate x - y
    push r4 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == multiply where x is jumptable + '*'
.section init
m[r0][jumptable + '*'] := multiply

// Removes the two youngest values of the stack and pushes their product 
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
multiply:
    push r1 on stack r2

    r5 := 2                     // number of elements required for multiply fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    pop r5 off stack r3         // pop x

    r4 := r5 * r4               // calculate x * y
    push r4 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == divide where x is jumptable + '/'
.section init
m[r0][jumptable + '/'] := divide

// Removes the two youngest values of the stack and pushes their quotient
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
// Divide by zero error if denominator is 0
.section text
division_by_zero:
    push r4 on stack r3             // return 0 to value stack
    output "Division by zero\n"     
    pop r1 off stack r2
    goto calculator

negate_both:
    r4 := -r4
    r5 := -r5
    goto divide_continue

negate_r4:
    if (r5 <s 0) goto negate_both using r1
    goto divide_with_signed

divide_with_signed:
    if (r4 >s 0) goto skip_r4_negation using r1
    r4 := -r4
    skip_r4_negation:
    if (r5 >s 0) goto skip_r5_negation using r1
    r5 := -r5
    skip_r5_negation:
    r4 := r5 / r4
    r4 := -r4
    push r4 on stack r3
    pop r1 off stack r2
    r4 := 0         // calculator enters the waiting stage
    goto calculator

divide:
    push r1 on stack r2

    r5 := 2                     // number of elements required for divide fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    if (r4 == 0) goto division_by_zero
    pop r5 off stack r3         // pop x
    if (r4 <s 0) goto negate_r4 using r1
    if (r5 <s 0) goto divide_with_signed using r1
    
    divide_continue:
    r4 := r5 / r4               // calculate x / y
    push r4 on stack r3         // push new value

    pop r1 off stack r2
    r4 := 0         // calculator enters the waiting stage
    goto calculator


// m[r0][x] == or where x is jumptable + '|'
.section init
m[r0][jumptable + '|'] := or

// Removes the two youngest values of the stack and pushes their bitwise or
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
or:
    push r1 on stack r2

    r5 := 2                     // number of elements required for or fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    pop r5 off stack r3         // pop x

    r4 := r5 | r4               // calculate x | y
    push r4 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator  

// m[r0][x] == or and x is jumptable + '&'
.section init
m[r0][jumptable + '&'] := and

// Removes the two youngest values of the stack and pushes their bitwise and
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
and:
    push r1 on stack r2

    r5 := 2                     // number of elements required for and fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    pop r5 off stack r3         // pop x

    r4 := r5 & r4               // calculate x & y
    push r4 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == negate and x is jumptable + 'c'
.section init
m[r0][jumptable + 'c'] := negate

// Removes the youngest value from the stack and pushes its negation
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
negate:
    push r1 on stack r2

    r5 := 1                     // number of elements required for negate fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r5
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r5 off stack r3         // pop x

    r5 := -r5                   // calculate -x
    push r5 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == complement and x is jumptable + '~'
.section init
m[r0][jumptable + '~'] := complement

// Removes the youngest value from the stack and pushes its complement
// onto the stack. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
complement:
    push r1 on stack r2

    r5 := 1                     // number of elements required for complement fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r5
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r5 off stack r3         // pop x

    r5 := ~r5                   // calculate ~x
    push r5 on stack r3         // push new value

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == swap and x is jumptable + 's'
.section init
m[r0][jumptable + 's'] := swap

// Removes the two youngest values of the stack and pushes them onto the stack
// in the opposite order. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
swap:
    push r1 on stack r2

    r5 := 2                     // number of elements required for and fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r4
    r5 := r3 + 1
    if (r5 == value_stack) goto stack_underflow using r4
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r4 off stack r3         // pop y
    pop r5 off stack r3         // pop x

    push r4 on stack r3         // reversing order of x and y on value stack
    push r5 on stack r3

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == duplicate and x is jumptable + 'd'
.section init
m[r0][jumptable + 'd'] := duplicate

// Removes the youngest value of the stack and pushes it onto the stack
// twice. Returns the machine to waiting state.
// Stack underflow error if insufficient number of arguments on stack.
.section text
duplicate:
    push r1 on stack r2

    r5 := 1                     // number of elements required for complement fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r5
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r5 off stack r3         // pop x
    
    push r5 on stack r3         // duplicating value on stack
    push r5 on stack r3         

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == pop_value and x is jumptable + 'p'
.section init
m[r0][jumptable + 'p'] := pop_value

// Removes the youngest values of the stack. Returns the machine to waiting 
// state. Stack underflow error if insufficient number of arguments on stack.
.section text
pop_value:
    push r1 on stack r2

    r5 := 1                     // number of elements required for complement fn
    push r5 on stack r2         // passing to stack_underflow
    if (r3 == value_stack) goto stack_underflow using r5
    pop r5 off stack r2         // removing from call stack if sufficient args
    
    pop r5 off stack r3         // pop x 

    r4 := 0         // calculator enters the waiting stage
    pop r1 off stack r2
    goto calculator

// m[r0][x] == clear and x is jumptable + 'z'
.section init
m[r0][jumptable + 'z'] := clear

// Removes all values of the stack. Returns the machine to waiting state.
.section text
clear:
    if (r3 == value_stack) goto calculator using r5    // empty value stack
    pop r5 off stack r3
    r4 := 0         // calculator enters the waiting stage
    
    goto clear

// Waiting State: Pushes the value onto the value stack.
// Entering State: Pops off the youngest value and appends the current input 
// onto it before pushing it onto the stack.
.section text
digit:
    if (r4 == 0) goto digit_waiting
    pop r5 off stack r3     // getting digit to "enter"
    r5 := r5 * 10           // adjusting to add new input
    pop r4 off stack r2
    r4 := r4 - 48
    r5 := r4 + r5
    push r5 on stack r3     // value to be added to value stack
    r4 := 1
    goto calculator

digit_waiting:
    pop r5 off stack r2     // parameter
    r5 := r5 - 48
    push r5 on stack r3     // Adding to call stack
    r4 := 1
    goto calculator

// Indicates the necessary number of arguments needed to execute the calling
// function. Returns the machine to the waiting state.
.section text
stack_underflow:
    pop r5 off stack r2     // retrieving number of arguments
    output "Stack underflow---expected at least "
    output r5 + 48
    if (r5 == 2) goto elements using r4
    element:
    output " element\n"
    goto end_stack_underflow
    elements:
    output " elements\n"

    end_stack_underflow:
    pop r1 off stack r2
    r4 := 0
    goto calculator

// Indicates that there is no calculator command for the character. Returns
// the machine to the waiting state.
input_err:
    pop r5 off stack r2
    output "Unknown character '"
    output r5
    output "'\n"
    r4 := 0

// m[r0][x] == 0 for all x s.t. value_stack - 10000 <= x < value_stack.
// Places the machine in the waiting state.
.section text
main:
    .section valstk
        .space 1000000
        value_stack:
    
    .section text
    r3 := value_stack
    // 0 is waiting and 1 is entering
    r4 := 0                 // Initial state is waiting

// goto m[r0][x] where x = jumptable + input
// Returns to calling function if end of input is reached
calculator:
    r5 := input()
    r5 := ~r5
    if (r5 == 0) goto r1        // examining input for EOI character
    r5 := ~r5
    
    push r5 on stack r2         // push input value on the stack
    r5 := jumptable + r5
    r5 := m[r0][r5]
    goto r5
